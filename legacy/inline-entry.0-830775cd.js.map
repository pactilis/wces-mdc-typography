{"version":3,"file":"inline-entry.0-830775cd.js","sources":["../../.storybook/preview.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js","../../index.js","../../demo.js","../../stories/index.stories.mdx","../../inline-entry.0.js"],"sourcesContent":["import {\n  addParameters,\n  addDecorator,\n  setCustomElements,\n  withA11y,\n} from '@open-wc/demoing-storybook';\n\naddDecorator(withA11y);\n\naddParameters({\n  a11y: {\n    config: {},\n    options: {\n      checks: { 'color-contrast': { options: { noScroll: true } } },\n      restoreScroll: true,\n    }\n  },\n  docs: {\n    iframeHeight: '200px',\n  }\n});\n\nasync function run() {\n  const customElements = await (\n    await fetch(new URL('../custom-elements.json', import.meta.url))\n  ).json();\n\n  setCustomElements(customElements);\n}\n\nrun();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        // Initialize to an unresolved Promise so we can make sure the element has\n        // connected before first update.\n        this._updatePromise = new Promise((res) => this._enableUpdatingResolver = res);\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, _options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.3.1');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\nexport class LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (userStyles === undefined) {\n            this._styles = [];\n        }\n        else if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it's most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = [userStyles];\n        }\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don't call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's NodePart - typically a TemplateResult.\n     * Setting properties inside this method will *not* trigger the element to\n     * update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the value to the element's DOM.\n * @param result The value to render.\n * @param container Node into which to render.\n * @param options Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { css } from 'lit-element';\n\nexport default css`\n  :host {\n    --font-weight-light: var(--app-font-weight-light, 300);\n    --font-weight-normal: var(--app-font-weight-normal, 400);\n    --font-weight-medium: var(--app-font-weight-medium, 500);\n    --font-weight-bold: var(--app-font-weight-bold, 900);\n  }\n\n  .headline1 {\n    font-weight: var(--app-headline1-font-weight, var(--font-weight-light));\n    font-size: var(--app-headline1-font-size, 6rem);\n    letter-spacing: var(--app-headline1-letter-spacing, -1.5px);\n  }\n  .headline2 {\n    font-weight: var(--app-headline2-font-weight, var(--font-weight-light));\n    font-size: var(--app-headline2-font-size, 3.75rem);\n    letter-spacing: var(--app-headline2-letter-spacing, -0.5px);\n  }\n  .headline3 {\n    font-weight: var(--app-headline3-font-weight, var(--font-weight-normal));\n    font-size: var(--app-headline3-font-size, 3rem);\n    letter-spacing: var(--app-headline3-letter-spacing, 0);\n  }\n  .headline4 {\n    font-weight: var(--app-headline4-font-weight, var(--font-weight-normal));\n    font-size: var(--app-headline4-font-size, 2.125rem);\n    letter-spacing: var(--app-headline4-letter-spacing, 0.25px);\n  }\n  .headline5 {\n    font-weight: var(--app-headline5-font-weight, var(--font-weight-normal));\n    font-size: var(--app-headline5-font-size, 1.5rem);\n    letter-spacing: var(--app-headline5-letter-spacing, 0);\n  }\n  .headline6 {\n    font-weight: var(--app-headline6-font-weight, var(--font-weight-medium));\n    font-size: var(--app-headline6-font-size, 1.25rem);\n    letter-spacing: var(--app-headline6-letter-spacing, 0.15px);\n  }\n  .subtitle1 {\n    font-weight: var(--app-subtitle1-font-weight, var(--font-weight-normal));\n    font-size: var(--app-subtitle1-font-size, 1rem);\n    letter-spacing: var(--app-subtitle1-letter-spacing, 0.15px);\n  }\n  .subtitle2 {\n    font-weight: var(--app-subtitle2-font-weight, var(--font-weight-medium));\n    font-size: var(--app-subtitle2-font-size, 0.875rem);\n    letter-spacing: var(--app-subtitle2-letter-spacing, 0.1px);\n  }\n  .body1 {\n    font-weight: var(--app-body1-font-weight, var(--font-weight-normal));\n    font-size: var(--app-body1-font-size, 1rem);\n    letter-spacing: var(--app-body1-letter-spacing, 0.5px);\n  }\n  .body2 {\n    font-weight: var(--app-body2-font-weight, var(--font-weight-normal));\n    font-size: var(--app-body2-font-size, 0.875rem);\n    letter-spacing: var(--app-body2-letter-spacing, 0.25px);\n  }\n  .caption {\n    font-weight: var(--app-caption-font-weight, var(--font-weight-normal));\n    font-size: var(--app-caption-font-size, 0.75rem);\n    letter-spacing: var(--app-caption-letter-spacing, 0.4px);\n  }\n  .overline {\n    font-weight: var(--app-overline-font-weight, var(--font-weight-normal));\n    font-size: var(--app-overline-font-size, 0.75rem);\n    letter-spacing: var(--app-overline-letter-spacing, 1.5px);\n    text-transform: uppercase;\n  }\n`;","import { LitElement, html, css } from 'lit-element';\nimport typography from './index.js';\n\nexport class AppDemo extends LitElement {\n\n  static get styles() {\n    return [\n      typography,\n      css`\n        .container {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(24rem, 1fr));\n          grid-gap: 2rem;\n          align-items: center;\n          justify-items: center;\n        }\n      `\n    ]\n  }\n\n  render() {\n    return html`\n      <div class=\"container\">\n          <h1 class=\"headline1\">Headline 1</h1>\n          <h2 class=\"headline2\">Headline 2</h2>\n          <h3 class=\"headline3\">Headline 3</h3>\n          <h4 class=\"headline4\">Headline 4</h4>\n          <h5 class=\"headline5\">Headline 5</h5>\n          <h6 class=\"headline6\">Headline 6</h6>\n          <h4 class=\"subtitle1\">Subtitle 1</h4>\n          <h4 class=\"subtitle2\">Subtitle 2</h4>\n          <p class=\"body1\">Body 1</p>\n          <p class=\"body2\">Body 2</p>\n          <h6 class=\"caption\">Caption</h6>\n          <h6 class=\"overline\">Overline</h6>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('app-demo', AppDemo);\n","import { Story, Preview, Meta, Props, html } from '@open-wc/demoing-storybook';\n\nimport '../demo.js';\n\n<Meta\n  title=\"WcesMdcTypography\"\n/>\n\n# WcesMdcTypography\n\nA [css module](https://lit-element.polymer-project.org/guide/styles) that defines a set of typographic classes.\nThis package is designed to be used with [lit-element](https://lit-element.polymer-project.org);\n\n## Installation\n\n```bash\nyarn add @wces/mdc-typography\n```\n\n```js\nimport typography from '@wces/mdc-typography';\n```\n\n## A example usage\n```js\nimport { LitElement, html, css } from 'lit-element';\nimport typography from '@wces/mdc-typography';\n\nexport class AppDemo extends LitElement {\n\n  static get styles() {\n    return [\n      typography,\n      css`\n        .container {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(24rem, 1fr));\n          grid-gap: 2rem;\n          align-items: center;\n          justify-items: center;\n        }\n      `\n    ]\n  }\n\n  render() {\n    return html`\n      <div class=\"container\">\n          <h1 class=\"headline1\">Headline 1</h1>\n          <h2 class=\"headline2\">Headline 2</h2>\n          <h3 class=\"headline3\">Headline 3</h3>\n          <h4 class=\"headline4\">Headline 4</h4>\n          <h5 class=\"headline5\">Headline 5</h5>\n          <h6 class=\"headline6\">Headline 6</h6>\n          <h4 class=\"subtitle1\">Subtitle 1</h4>\n          <h4 class=\"subtitle2\">Subtitle 2</h4>\n          <p class=\"body1\">Body 1</p>\n          <p class=\"body2\">Body 2</p>\n          <h6 class=\"caption\">Caption</h6>\n          <h6 class=\"overline\">Overline</h6>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('app-demo', AppDemo);\n```\n\n\n\n\n<Preview withToolbar>\n  <Story name=\"Simple\">\n    {html`\n      <app-demo></app-demo>\n    `}\n  </Story>\n</Preview>\n","\n  import './.storybook/preview.js';\n  import { configure } from './node_modules/storybook-prebuilt/web-components.js';\n  import * as story0 from './stories/index.stories.mdx?storybook-story'\n\n  configure(() => [\n    story0\n  ], {});\n  "],"names":["fetch","URL","importMeta","url","json","customElements","setCustomElements","withA11y","a11y","config","options","checks","noScroll","restoreScroll","docs","iframeHeight","run","window","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","value","type","Boolean","Object","Array","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","UpdatingElement","_updateState","_instanceProperties","undefined","_updatePromise","Promise","res","_this","_enableUpdatingResolver","_changedProperties","Map","_reflectingProperties","initialize","_saveInstanceProperties","_requestUpdate","constructor","_classProperties","forEach","_v","p","_this2","hasOwnProperty","set","v","_this3","enableUpdating","this","name","_attributeToProperty","ctor","attr","_attributeNameForProperty","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","_attributeToPropertyMap","get","getPropertyOptions","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","has","_hasRequestedUpdate","_enqueueUpdate","updateComplete","result","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","e","firstUpdated","updated","size","k","_this4","_propertyToAttribute","_getUpdateComplete","superProperties","getPrototypeOf","_this5","_ensureClassProperties","noAccessor","prototype","key","_typeof","Symbol","descriptor","getPropertyDescriptor","defineProperty","_options","configurable","enumerable","superCtor","finalize","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","toLowerCase","attributes","_this6","push","HTMLElement","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","Error","_styleSheet","replaceSync","textFromCSSResult","css","strings","values","reduce","acc","idx","renderNotImplemented","LitElement","_getUniqueStyles","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","styles","_styles","length","ShadyCSS","nativeShadow","adoptedStyleSheets","map","s","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","hasUpdated","styleElement","templateResult","render","scopeName","eventContext","style","document","createElement","textContent","appendChild","userStyles","getStyles","isArray","addStyles","reduceRight","add","Set","unshift","AppDemo","html","typography","define","layoutProps","MDXContent","components","mdx","mdxType","Meta","title","parentName","Preview","withToolbar","Story","isMDXComponent","simple","story","parameters","mdxSource","componentMeta","includeStories","mdxStoryNameToKey","page","AddContext","mdxComponentMeta","story0"],"mappings":"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"}